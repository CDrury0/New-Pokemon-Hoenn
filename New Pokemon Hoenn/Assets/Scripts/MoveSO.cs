using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum MoveCategory { Physical, Special, Status }

public enum MoveTarget { Self, Single, Spread }

[CreateAssetMenu]
public class MoveSO : ScriptableObject
{
    public AnimationClip animationClip;
    public AudioClip audioClip;
    public MoveCategory moveCategory;
    public MoveTarget moveTarget;
    public string moveName;
    public string moveDescription;
    public int moveMaxPP;
    public int movePower;
    public float moveAccuracy;
    public StatLib.Type moveType;
    public bool typeFromWeather;
    public bool directDamage;
    public int movePriority;
    public PrimaryStatus statusInflicted;
    public float statusChance;
    public bool protects;
    public bool ignoresProtect;
    public bool safeguard;
    public Weather causesWeather;
    public bool restoresFromWeather;
    public bool oneHitKO;
    public bool givesStatChangeImmunity;
    public int[] targetStatsAffected;
    public float targetStatChance;
    public int[] userStatsAffected;
    public float userStatChance;
    public bool dmgEqualsLevel;
    public bool dmgEqualsPower;
    public bool dmgFromHighHP;
    public bool dmgFromLowHP;
    public int dmgFromFriendship;
    public bool facade;
    public bool psychUp;
    public bool beatUp;
    public bool magnitudeFormula;
    public bool psywaveFormula;
    public bool revenge;
    public bool furyCutter;
    public bool cannotCrit;
    public bool highCritRatio;
    public bool cannotMiss;
    public bool soundBased;
    public bool focusPunch;
    public float removesUserHP;
    public bool canKOSelf;
    public bool chargingTurn;
    public string specialText;
    public SemiInvulnerable givesSemiInvulnerable;
    public bool removeSemiInvulnerable;
    public Weather bypassOnWeather;
    public bool drainsHP;
    public bool curls;
    public bool bonusFromCurl;
    public bool toxic;
    public bool futureSight;
    public bool curses;
    public bool binds;
    public bool preventsEscape;
    public float confuseChance;
    public bool confusesUser;
    public bool encore;
    public float flinchChance;
    public bool identifies;
    public bool infatuates;
    public bool leechSeed;
    public bool spores;
    public bool perishSong;
    public bool taunts;
    public bool torments;
    public bool endure;
    public bool endeavor;
    public bool disables;
    public bool cannotKO;
    public bool centerOfAttention;
    public bool spikes;
    public bool rapidSpin;
    public bool minimizes;
    public bool bonusAgainstMinimized;
    public bool substitute;
    public bool ingrains;
    public bool groundsSelf;
    public bool groundsEnemy;
    public bool locksOn;
    public bool mustRecharge;
    public bool breaksWalls;
    public bool fakeOut;
    public bool smellingSalts;
    public bool wakesTarget;
    public bool bonusAgainstSleep;
    public bool spite;
    public bool pursuit;
    public bool payback;
    public bool counter;
    public bool mirrorCoat;
    public bool rage;
    public bool wish;
    public bool charge;
    public bool teleport;
    public bool mirrorMove;
    public bool haze;
    public bool rolePlay;
    public bool selfDestruct;
    public bool worksOnAsleep;
    public bool nightmare;
    public bool snatch;
    public bool cannotBeSnatched;
    public bool grudge;
    public bool destinyBond;
    public bool worksWhileAsleep;
    public bool bideWait;
    public bool bideRelease;
    public bool magicCoat;
    public bool reflectedByMagicCoat;
    public bool hitsMultipleTimes;
    public int maxHits;
    public bool makesContact;
    public bool struggle;
    public bool recover;
    public bool rest;
    public bool triAttack;
    public bool curesPartyStatus;
    public bool stockpile;
    public bool spitUp;
    public bool swallow;
    public bool drowsy;
    public bool assist;
    public bool sleepTalk;
    public StatLib.Type sportAgainst;
    public SemiInvulnerable hitsSemiInvulnerable;
    public bool bonusAgainstSemiInvulnerable;
    public bool forcesSwitch;
    public float recoilDamage;
    public int forcedToUseFor;
    public bool confuseOnEnd;
    public bool bonusFromConsec;
    public bool basedOnWeight;
    public MoveSO useNext;
    public MoveSO prerequisite;
}

